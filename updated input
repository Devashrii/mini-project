If you want the output of the Flask application to predict the **rest of the attributes in the dataset**, the app needs to process the input and then return predicted values for multiple attributes simultaneously. Here's how to adjust the setup:

---

### **Steps to Modify the Application**

#### **1. Understand the Data**
The uploaded dataset (`Combined_Menstrual_Habits_Comparison.csv`) will serve as the source. To create predictions for the remaining attributes, you need to:
- Load the dataset.
- Train models for each attribute you want to predict.
- Save these models for use in the Flask app.

#### **2. Identify Target Columns**
From the dataset, determine which attributes need to be predicted. For example:
- If `Age`, `Dietary_Pattern`, `Fast_Food_Intake`, `Socioeconomic_Status`, `Region`, `Industrialization_Level`, and `Nutrition_Access` are inputs, the outputs can be the other columns in the dataset.

---

#### **3. Training Models for Outputs**
For each output column, train a model using the provided inputs. Here's a sample script for training and saving multiple models:

```python
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
import pickle

# Load the dataset
data = pd.read_csv("Combined_Menstrual_Habits_Comparison.csv")

# Define input and target attributes
input_features = ["Age", "Dietary_Pattern", "Fast_Food_Intake", "Socioeconomic_Status", "Region", "Industrialization_Level", "Nutrition_Access"]
target_columns = [col for col in data.columns if col not in input_features]

# Preprocessing (e.g., encoding categorical data, scaling)
from sklearn.preprocessing import LabelEncoder, StandardScaler

label_encoders = {col: LabelEncoder() for col in data.columns if data[col].dtype == "object"}
for col, encoder in label_encoders.items():
    data[col] = encoder.fit_transform(data[col])

scaler = StandardScaler()
data[input_features] = scaler.fit_transform(data[input_features])

# Train and save models
for target in target_columns:
    X = data[input_features]
    y = data[target]

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    model = RandomForestClassifier()
    model.fit(X_train, y_train)

    # Save the model
    with open(f"{target}_model.pkl", "wb") as f:
        pickle.dump(model, f)

# Save encoders and scaler
with open("label_encoders.pkl", "wb") as f:
    pickle.dump(label_encoders, f)

with open("scaler.pkl", "wb") as f:
    pickle.dump(scaler, f)
```

---

#### **4. Modify the Flask Backend**
Adjust the Flask app to predict multiple attributes simultaneously.

```python
from flask import Flask, render_template, request
import pickle
import numpy as np

app = Flask(__name__)

# Load models, encoders, and scaler
label_encoders = pickle.load(open("label_encoders.pkl", "rb"))
scaler = pickle.load(open("scaler.pkl", "rb"))

# Load models for each target attribute
target_columns = ["Target_Col1", "Target_Col2", "Target_Col3"]  # Replace with actual target column names
models = {col: pickle.load(open(f"{col}_model.pkl", "rb")) for col in target_columns}

@app.route("/")
def home():
    return render_template("index.html")

@app.route("/predict", methods=["POST"])
def predict():
    # Collect input data from form
    inputs = {
        "Age": float(request.form["age"]),
        "Dietary_Pattern": request.form["dietary_pattern"],
        "Fast_Food_Intake": request.form["fast_food_intake"],
        "Socioeconomic_Status": request.form["socioeconomic_status"],
        "Region": request.form["region"],
        "Industrialization_Level": request.form["industrialization_level"],
        "Nutrition_Access": request.form["nutrition_access"],
    }

    # Encode and normalize inputs
    encoded_inputs = []
    for col, value in inputs.items():
        if col == "Age":
            encoded_inputs.append(float(value))  # Age remains numeric
        else:
            encoded_inputs.append(label_encoders[col].transform([value])[0])  # Encode categorical values
    encoded_inputs = np.array(encoded_inputs).reshape(1, -1)
    scaled_inputs = scaler.transform(encoded_inputs)

    # Predict all target attributes
    predictions = {}
    for target, model in models.items():
        prediction = model.predict(scaled_inputs)[0]
        if target in label_encoders:
            prediction = label_encoders[target].inverse_transform([prediction])[0]
        predictions[target] = prediction

    return render_template("result.html", inputs=inputs, predictions=predictions)

if __name__ == "__main__":
    app.run(debug=True)
```

---

#### **5. Adjust Frontend Files**
1. **Homepage (`templates/index.html`)**:
   - Include input fields for the defined input attributes.

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <title>Menstrual Attribute Predictor</title>
</head>
<body>
    <h1>Predict Menstrual Attributes</h1>
    <form action="/predict" method="POST">
        <label>Age:</label>
        <input type="number" step="0.1" name="age" required><br>
        <label>Dietary Pattern:</label>
        <input type="text" name="dietary_pattern" required><br>
        <label>Fast Food Intake:</label>
        <input type="text" name="fast_food_intake" required><br>
        <label>Socioeconomic Status:</label>
        <input type="text" name="socioeconomic_status" required><br>
        <label>Region:</label>
        <input type="text" name="region" required><br>
        <label>Industrialization Level:</label>
        <input type="text" name="industrialization_level" required><br>
        <label>Nutrition Access:</label>
        <input type="text" name="nutrition_access" required><br>
        <button type="submit">Predict</button>
    </form>
</body>
</html>
```

2. **Result Page (`templates/result.html`)**:
   - Display predictions for all target attributes.

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <title>Prediction Results</title>
</head>
<body>
    <h1>Prediction Results</h1>
    <h2>Inputs:</h2>
    <ul>
        {% for key, value in inputs.items() %}
        <li>{{ key.replace('_', ' ').title() }}: {{ value }}</li>
        {% endfor %}
    </ul>
    <h2>Predictions:</h2>
    <ul>
        {% for key, value in predictions.items() %}
        <li>{{ key.replace('_', ' ').title() }}: {{ value }}</li>
        {% endfor %}
    </ul>
    <a href="/">Back to Home</a>
</body>
</html>
```

---

#### **6. Run the Flask App**
1. Open the terminal in your project directory.
2. Run the Flask app:
   ```bash
   python app.py
   ```
3. Access the app at `http://127.0.0.1:5000/`.

This setup will take user inputs and predict all the specified output attributes from the dataset. Let me know if further clarification is needed!
